using Dapper;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Net.Configuration;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using hotelExtrados.Models;
using System.Data;
using System.Data.SqlTypes;
using System.Collections;

namespace hotelExtrados.Services
{
    public class Login_Register
    {
        private static string connectHotel = 
            ConfigurationManager.ConnectionStrings["hotelExtrados"].ConnectionString.ToString();
        SqlConnection connectSql = new SqlConnection(connectHotel);

        /// <summary>
        /// Validate Login
        /// </summary>
        /// <param name="nameInput">Username</param>
        /// <param name="passwordInput">Password entered</param>
        /// <returns>True if password valid - False if password is not valid</returns>
        public bool ValidateLogin(string name_User, string passwordInput)
        {
            using (connectSql)
            {
                string sqlValidate = @"SELECT * FROM listUser WHERE name_User = @name_User";
                var validate = connectSql.QuerySingleOrDefault<UserControl>(sqlValidate, new{ name_User });
                if (validate == null) return false; else return true;

                SqlBinary sqlBinary = validate.Salt_Password;
                byte[] byteArray = sqlBinary.Value;
                try
                {
                    var validPassword = Hash(passwordInput, byteArray);
                    if (validPassword == validate.Hash_Password) return true; else return false;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Create a new user | Admin / Aap |
        /// </summary>
        /// <param name="db_user">Object with the data of the new user</param>
        public void CreateUser(UserControl db_user)
        {
            using (connectSql)
            {
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@nameUser", db_user.Name_User,DbType.String,ParameterDirection.Input);
                parameters.Add("@passwordUser", db_user.Password_User, DbType.String, ParameterDirection.Input);
                parameters.Add("@saltPassword", Salt(), DbType.Binary, ParameterDirection.Input);
                parameters.Add("@hashPassword", Hash(@"passwordUser", Salt()),DbType.Binary, ParameterDirection.Input);
                parameters.Add("@statusAap", Convert.ToByte(db_user.Status_Aap), DbType.Byte, ParameterDirection.Input, 1);
                parameters.Add("@statusAdmin", Convert.ToByte(db_user.Status_Admin), DbType.Byte, ParameterDirection.Input, 1);

                var userNew = connectSql.Execute("newUserRegister", parameters, commandType: CommandType.StoredProcedure);
                Console.WriteLine($"{userNew} new data added");
                Console.Read();
            }
        }

        /// <summary>
        /// Apply a hash to the salt
        /// </summary>
        /// <param name="password">Password generated by the new user</param>
        /// <param name="salt">Binary vector</param>
        /// <returns>Hash | password + salt</returns>
        private SqlBinary Hash(string password, byte[] salt)
        {   
            var passwordH = password + salt;

            using (var sha256 = SHA256.Create())
            {
                var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(passwordH));
                return new SqlBinary(hashedBytes);
            }
        }

        /// <summary>
        /// Run Salt
        /// </summary>
        /// <returns>Vector binary</returns>
        private Byte[] Salt()
        {
            using (var rng = new RNGCryptoServiceProvider())
            {
                var salt = new byte[16];
                rng.GetBytes(salt);

                return salt;
            }
        }
    }
}
