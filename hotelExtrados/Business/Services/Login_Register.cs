using Dapper;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Net.Configuration;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using hotelExtrados.Models;
using System.Data;
using System.Data.SqlTypes;
using System.Collections;
using System.Resources;

namespace hotelExtrados.Services
{
    public class Login_Register
    {
        private static string connectHotel = 
            ConfigurationManager.ConnectionStrings["hotelExtrados"].ConnectionString.ToString();
        SqlConnection connectSql = new SqlConnection(connectHotel);

        /// <summary>
        /// Validate Login
        /// </summary>
        /// <param name="nameInput">Username</param>
        /// <param name="passwordInput">Password entered</param>
        /// <returns>True if password valid - False if password is not valid</returns>
        //public bool ValidateLogin(UserInput userI, PasswordI password)
        //{
        //    using (connectSql)
        //    {
        //        string sqlQuery = @"SELECT * from listUser where name_User = @name_User";
        //    }
        //}

        /// <summary>
        /// Create a new user | Admin / Aap |
        /// </summary>
        /// <param name="db_user">Object with the data of the new user</param>
        public void CreateUser(string passwordInput, UserInput db_user)
        {
            SqlBinary hashInput = Hash(passwordInput);
            using (connectSql)
            {
                connectSql.Open();
                string sql = "INSERT INTO listUser(name_User,salt_Password,hash_Password,status_Aap,status_Admin) VALUES (@name_User, @salt_Password, @hash_Password, @status_Aap, @status_Admin)";

                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@name_User", db_user.Name_User, DbType.String, ParameterDirection.Input, 20);
                parameters.Add("@salt_Password", hashInput.Value.Take(16).ToArray());
                parameters.Add("@hash_Password", hashInput.Value.Skip(16).Take(20).ToArray());
                parameters.Add("@status_Aap", db_user.Status_Aap, DbType.Boolean, ParameterDirection.Input);
                parameters.Add("@status_Admin", db_user.Status_Admin, DbType.Boolean, ParameterDirection.Input);

                int rows = connectSql.Execute(sql, parameters);

                Console.WriteLine($"\n{rows} new user");
                Console.Read();
            }
        }

        /// <summary>
        /// Apply a hash to the salt
        /// </summary>
        /// <param name="password">Password generated by the new user</param>
        /// <returns>Hash | password + salt</returns>
        private SqlBinary Hash(string password)
        {
            byte[] salt;
            new RNGCryptoServiceProvider().GetNonZeroBytes(salt = new byte[16]);

            var hashRfc28 = new Rfc2898DeriveBytes(password, salt, 10000);
            byte[] hash = hashRfc28.GetBytes(20);

            byte[] hashFinish = new byte[36];

            return new SqlBinary(hashFinish);
        }
    }
}
